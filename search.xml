<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Idea快捷键</title>
    <url>/2023/05/07/Idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>在日常开发中,熟练的使用 IDE 的快捷键,可以大大提高我们开发效率,IDEA快捷键大全(持续更新)…</p>
<p>1.最常用的psvm,main生成main方法,sout生成输出</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_13_11_13_image-20230507131101685.png" alt="image-20230507131101685"></p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_13_12_19_image-20230507131215665.png" alt="image-20230507131215665"></p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_13_13_27_image-20230507131324251.png" alt="image-20230507131324251"></p>
<p>2.删除所在行:Ctrl+Y</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_13_31_43_%E5%8A%A8%E7%94%BB.gif" alt="动画"></p>
<p>3.新建,添加的快捷键:Alt + lnsert</p>
<p>在代码区使用Alt + lnsert会出现Generate菜单</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_13_34_21_image-20230507133412150.png" alt="image-20230507133412150"></p>
<p>在项目区使用Alt + lnsert会出现New</p>
<p><img src="C:\Users\a12345\AppData\Roaming\Typora\typora-user-images\image-20230507133954512.png" alt="image-20230507133954512"></p>
<p>4.切换Java源文件:Alt + 右箭头或 Alt + 左箭头</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_13_58_29_%E5%8A%A8%E7%94%BB.gif" alt="动画"></p>
<p>5.目录项目关闭:Shift+ESC</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_14_16_38_%E5%8A%A8%E7%94%BB.gif" alt="动画"></p>
<p>6.运行:Ctrl + Shift + F10或者是Shift + F10,Debug:Shift + F9</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_14_29_0_%E5%8A%A8%E7%94%BB.gif" alt="动画"></p>
<p>7.提示方法的参数:Ctrl + p</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_14_37_34_%E5%8A%A8%E7%94%BB.gif" alt="动画"></p>
<p>8.切换窗口:Alt + (数字)</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_14_43_4_%E5%8A%A8%E7%94%BB.gif" alt="动画"></p>
<p>9.查找</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_14_56_56_image-20230507145653428.png" alt="image-20230507145653428"></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F</td>
<td>当前文件中查找</td>
</tr>
<tr>
<td>Shift + Shift</td>
<td>快速查找</td>
</tr>
<tr>
<td>Ctrl + N</td>
<td>查找Class</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>查找File</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + N</td>
<td>查找Symbol</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>查找Actions</td>
</tr>
</tbody></table>
<p>10.跳转切换</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_14_58_36_image-20230507145834965.png" alt="image-20230507145834965"></p>
<table>
<thead>
<tr>
<th><strong>快捷键</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + E</td>
<td>最近文件</td>
</tr>
<tr>
<td>Ctrl + Tab</td>
<td>切换文件</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>跳转指定行号</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>11.编辑和查看相关</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Alt + T(经常用)</td>
<td><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/05/7_15_11_24_image-20230507151121997.png" alt="image-20230507151121997"></td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>在当前行之后插入一行</td>
</tr>
<tr>
<td>Ctrl + Alt + Enter</td>
<td>在当前行之前插入一行</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>快速选中</td>
</tr>
<tr>
<td>Alt + 上下方向键</td>
<td>方法快速跳转</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>撤销</td>
</tr>
<tr>
<td>Ctrl + Shift + Z</td>
<td>恢复</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>类的层级关系</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>快速复制(选中块也可以复制)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>IDEA合集</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>TestPic</title>
    <url>/2023/04/24/TestPic/</url>
    <content><![CDATA[<p>测试上传功能:</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/24_15_14_50_image-20230424151450021.png" alt="image-20230424151450021"></p>
]]></content>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>初始化博客</title>
    <url>/2023/04/24/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="0-前置内容"><a href="#0-前置内容" class="headerlink" title="0. 前置内容"></a>0. 前置内容</h1><p>1.需要Git环境,可以在<a href="https://git-scm.com/">Git (git-scm.com)</a>页面进行下载安装</p>
<p>2.需要NodeJS环境,可以在<a href="https://nodejs.org/en">Node.js (nodejs.org)</a>页面下载安装</p>
<p>以上环境安装,需要自行配置好,此页面不做安装配置讲解!</p>
<h1 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h1><p>首先可以在我的电脑中任意盘符,新建hexo文件夹,如图所示</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/24_15_20_3_image-20230424111617543.png" alt="image-20230424111617543"></p>
<p>在hexo文件夹下直接鼠标右键,选择Git Bash Here</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/24_15_20_14_image-20230424111758065.png" alt="image-20230424111758065"></p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/24_15_20_18_image-20230424111910950.png" alt="image-20230424111910950"></p>
<p>在Git命令行窗口执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">1.npm install hexo-cli -g<br>2.hexo init blog<br>3.cd blog<br>4.npm install<br>5.hexo server<br></code></pre></td></tr></table></figure>

<p>依次执行完以上命令后,会在hexo文件夹下生成一个blog文件夹</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/24_15_20_25_image-20230424112930120.png" alt="image-20230424112930120"></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile">1..deploy_git和.github文件夹都是部署到github和版本控制相关参数<br>2.node_modules是hexo一些相关依赖模块<br>3.public存放生成的页面也就是访问的页面<br>4.scaffolds生成文章模板<br>5.source用来存放用户的文章<br>6.themes存放hexo主题<br></code></pre></td></tr></table></figure>

<p>Hexo相关命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">-d, --deploy	文件生成后立即部署网站<br>-w, --watch	    监视文件变动<br>-b, --bail	    生成过程中如果发生任何未处理的异常则抛出异常<br>-f, --force	    强制重新生成文件 Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。 使用该参数的效果接近 hexo clean &amp;&amp; hexo generate<br>-c, --concurrency	最大同时生成文件的数量，默认无限制<br>-p, --port	        重设端口<br>-s, --static        只使用静态文件<br>-l, --<span class="hljs-built_in">log</span>	        启动日记记录，使用覆盖记录格式<br>-g, --generate      生成静态页面<br>hexo new            博客名称<br>hexo clean          清理本地缓存<br>npm install hexo-deployer-git --save 部署到GitHub Pages<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper笔记</title>
    <url>/2023/04/30/zookeeper%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="【第一章】ZooKeeper概念和安装"><a href="#【第一章】ZooKeeper概念和安装" class="headerlink" title="【第一章】ZooKeeper概念和安装"></a>【第一章】ZooKeeper概念和安装</h2><h3 id="1-Zookeeper概念"><a href="#1-Zookeeper概念" class="headerlink" title="1 Zookeeper概念"></a>1 Zookeeper概念</h3><p>•Zookeeper 是 Apache Hadoop 项目下的一个子项目，是一个树形目录服务。</p>
<p>•Zookeeper 翻译过来就是 动物园管理员，他是用来管 Hadoop（大象）、Hive(蜜蜂)、Pig(小 猪)的管理员。简称zk</p>
<p>&#x3D;&#x3D;<strong>ZooKeeper 是一个分布式的、开源的分布式应用程序的协调服务。</strong>&#x3D;&#x3D;</p>
<p>•Zookeeper 提供的主要功能包括：</p>
<ol>
<li>配置管理</li>
<li>分布式锁</li>
<li>集群管理【作为服务的注册中心】</li>
</ol>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_25_46_1592054580488.png" alt="1592054580488"></p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_25_56_1592054603167.png" alt="1592054603167"></p>
<h3 id="2-ZooKeeper-安装与配置"><a href="#2-ZooKeeper-安装与配置" class="headerlink" title="2 ZooKeeper 安装与配置"></a>2 ZooKeeper 安装与配置</h3><h4 id="2-1-下载安装"><a href="#2-1-下载安装" class="headerlink" title="2.1 下载安装"></a>2.1 下载安装</h4><h5 id="2-1-1、环境准备"><a href="#2-1-1、环境准备" class="headerlink" title="2.1.1、环境准备"></a><strong>2.1.1、环境准备</strong></h5><p>ZooKeeper服务器是用Java创建的，它运行在JVM之上。需要安装JDK 7或更高版本。</p>
<h5 id="2-1-2、上传"><a href="#2-1-2、上传" class="headerlink" title="2.1.2、上传"></a><strong>2.1.2、上传</strong></h5><p>将下载的ZooKeeper放到&#x2F;opt&#x2F;ZooKeeper目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">上传zookeeper alt+p 【如果使用finalshell，这一步就不用做，直接使用finalshell中的上传按钮】</span><br>put f:/setup/apache-zookeeper-3.5.6-bin.tar.gz<br><span class="hljs-meta prompt_">#</span><span class="language-bash">打开 opt目录</span><br>cd /opt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建zooKeeper目录</span><br>mkdir  zooKeeper<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将zookeeper安装包移动到 /opt/zooKeeper</span><br>mv apache-zookeeper-3.5.6-bin.tar.gz /opt/zookeeper/<br></code></pre></td></tr></table></figure>

<h5 id="2-1-3、解压"><a href="#2-1-3、解压" class="headerlink" title="2.1.3、解压"></a><strong>2.1.3、解压</strong></h5><p>将tar包解压到&#x2F;opt&#x2F;zookeeper目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">tar -zxvf apache-ZooKeeper-3.5.6-bin.tar.gz <br></code></pre></td></tr></table></figure>

<h4 id="2-2-配置启动"><a href="#2-2-配置启动" class="headerlink" title="2.2 配置启动"></a>2.2 配置启动</h4><h5 id="2-2-1-配置zoo-cfg"><a href="#2-2-1-配置zoo-cfg" class="headerlink" title="2.2.1 配置zoo.cfg"></a><strong>2.2.1 配置zoo.cfg</strong></h5><p>进入到conf目录拷贝一个zoo_sample.cfg并完成配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入到conf目录</span><br>cd /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">拷贝</span><br>cp  zoo_sample.cfg  zoo.cfg<br></code></pre></td></tr></table></figure>

<p>修改zoo.cfg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">打开目录</span><br>cd /opt/zooKeeper/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建zooKeeper存储目录</span><br>mkdir  zkdata<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改zoo.cfg</span><br>vim /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/conf/zoo.cfg<br></code></pre></td></tr></table></figure>

<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_5_1577548250377.png" alt="image-20200910230613370" style="zoom:150%;" />

<p>修改存储目录：dataDir&#x3D;&#x2F;opt&#x2F;zookeeper&#x2F;zkdata</p>
<h5 id="2-2-2-启动ZooKeeper"><a href="#2-2-2-启动ZooKeeper" class="headerlink" title="2.2.2 启动ZooKeeper"></a><strong>2.2.2 启动ZooKeeper</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /opt/zooKeeper/apache-zooKeeper-3.5.6-bin/bin/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>./zkServer.sh  start<br></code></pre></td></tr></table></figure>

<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_13_1577548052037.png" alt="image-20200910230700167" style="zoom:150%;" />

<p>看到上图表示ZooKeeper成功启动</p>
<h5 id="2-3-3-查看ZooKeeper状态"><a href="#2-3-3-查看ZooKeeper状态" class="headerlink" title="2.3.3 查看ZooKeeper状态"></a><strong>2.3.3 查看ZooKeeper状态</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">./zkServer.sh status<br></code></pre></td></tr></table></figure>

<p>zookeeper启动成功。standalone代表zk没有搭建集群，现在是单节点</p>
<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_18_1577548175232.png" alt="image-20200910230741675" style="zoom:150%;" />

<p>zookeeper没有启动</p>
<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_24_1577548112773.png" alt="image-20200910230805515" style="zoom:150%;" />



<h2 id="【第二章】ZooKeeper-命令操作"><a href="#【第二章】ZooKeeper-命令操作" class="headerlink" title="【第二章】ZooKeeper 命令操作"></a>【第二章】ZooKeeper 命令操作</h2><h3 id="1-Zookeeper命令操作数据模型"><a href="#1-Zookeeper命令操作数据模型" class="headerlink" title="1 Zookeeper命令操作数据模型"></a>1 Zookeeper命令操作数据模型</h3><ul>
<li>数据模型介绍</li>
</ul>
<p>​		ZooKeeper 是一个树形目录服务,其数据模型和Unix的文件系统目录树很类似，拥有一个层次化结构。这里面的每一个节点都被称为 ZNode，每个节点上都会保存自己的数据和节点信息。 节点可以拥有子节点，同时也允许少量（1MB）数据存储在该节点之下。</p>
<ul>
<li>节点可以分为四大类：</li>
</ul>
<p>​		PERSISTENT 持久化节点 </p>
<p>​		EPHEMERAL 临时节点 ：-e</p>
<p>​		PERSISTENT_SEQUENTIAL 持久化顺序节点 ：-s</p>
<p>​		EPHEMERAL_SEQUENTIAL 临时顺序节点  ：-es</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_40_image-20200910231032931.png" alt="image-20200910231032931"></p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_46_image-20200910231051278.png" alt="image-20200910231051278"></p>
<h3 id="2-Zookeeper命令操作服务端命令"><a href="#2-Zookeeper命令操作服务端命令" class="headerlink" title="2 Zookeeper命令操作服务端命令"></a>2 Zookeeper命令操作服务端命令</h3><p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_52_1592055088686.png" alt="1592055088686"></p>
<ol>
<li>启动 ZooKeeper 服务: .&#x2F;zkServer.sh start</li>
<li>查看 ZooKeeper 服务状态: .&#x2F;zkServer.sh status</li>
<li>停止 ZooKeeper 服务: .&#x2F;zkServer.sh stop </li>
<li>重启 ZooKeeper 服务: .&#x2F;zkServer.sh restart</li>
</ol>
<h3 id="3-客户端常用命令-CRUD"><a href="#3-客户端常用命令-CRUD" class="headerlink" title="3 客户端常用命令-CRUD"></a><strong>3 客户端常用命令-CRUD</strong></h3><p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_26_57_1592055332198.png" alt="1592055332198"></p>
<p><img src="D:/java学习资料/java127/zookeeper笔记(1天)/笔记/assets/1592055345400.png" alt="1592055345400"></p>
<ul>
<li>连接ZooKeeper服务端</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">./zkCli.sh -server 主机的ip:port  如果是连接本级，可以省略ip:port<br></code></pre></td></tr></table></figure>

<ul>
<li>断开连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">quit<br></code></pre></td></tr></table></figure>

<ul>
<li>查看命令帮助</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">help<br></code></pre></td></tr></table></figure>

<ul>
<li>显示指定目录下节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ls 目录<br></code></pre></td></tr></table></figure>

<ul>
<li>创建节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">create /节点path value<br></code></pre></td></tr></table></figure>

<ul>
<li>获取节点值</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">get /节点path<br></code></pre></td></tr></table></figure>

<ul>
<li>设置节点值</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">set /节点path value<br></code></pre></td></tr></table></figure>

<ul>
<li>删除单个节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">delete /节点path<br></code></pre></td></tr></table></figure>

<ul>
<li>删除带有子节点的节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">deleteall /节点path<br></code></pre></td></tr></table></figure>

<h3 id="4-客户端命令-创建临时有序节点"><a href="#4-客户端命令-创建临时有序节点" class="headerlink" title="4 客户端命令-创建临时有序节点"></a>4 客户端命令-创建临时有序节点</h3><ul>
<li>创建临时节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">create -e /节点path value<br></code></pre></td></tr></table></figure>

<ul>
<li>创建顺序节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">create -s /节点path value<br></code></pre></td></tr></table></figure>

<ul>
<li>创建临时顺序节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">create -es /节点path value<br></code></pre></td></tr></table></figure>

<ul>
<li>查询节点详细信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ls –s /节点path <br></code></pre></td></tr></table></figure>

<p>•czxid：节点被创建的事务ID </p>
<p>•ctime: 创建时间 </p>
<p>•mzxid: 最后一次被更新的事务ID </p>
<p>•mtime: 修改时间 </p>
<p>•pzxid：子节点列表最后一次被更新的事务ID</p>
<p>•cversion：子节点的版本号 </p>
<p>•dataversion：数据版本号 </p>
<p>•aclversion：权限版本号 </p>
<p>•ephemeralOwner：用于临时节点，代表临时节点的事务ID，如果为持久节点则为0 </p>
<p>•dataLength：节点存储的数据的长度 </p>
<p>•numChildren：当前节点的子节点个数 </p>
<h2 id="【第三章】ZooKeeper-JavaAPI-操作"><a href="#【第三章】ZooKeeper-JavaAPI-操作" class="headerlink" title="【第三章】ZooKeeper JavaAPI 操作"></a>【第三章】ZooKeeper JavaAPI 操作</h2><h3 id="1-curator介绍"><a href="#1-curator介绍" class="headerlink" title="1 curator介绍"></a>1 curator介绍</h3><p>Curator 是 Apache ZooKeeper 的Java客户端库。</p>
<p>吐血推荐博客：<a href="https://www.cnblogs.com/shamo89/p/9800925.html">https://www.cnblogs.com/shamo89/p/9800925.html</a></p>
<ul>
<li><p>常见的ZooKeeper Java API ：</p>
<p>原生Java API</p>
<p>ZkClient</p>
<p>Curator</p>
</li>
<li><p>Curator 项目的目标是简化 ZooKeeper 客户端的使用。</p>
</li>
<li><p>Curator 最初是 Netfix 研发的,后来捐献了 Apache 基金会,目前是 Apache 的顶级项目。</p>
</li>
</ul>
<p>•官网：<a href="http://curator.apache.org/">http://curator.apache.org/</a></p>
<h3 id="2-JavaAPI操作-建立连接"><a href="#2-JavaAPI操作-建立连接" class="headerlink" title="2 JavaAPI操作-建立连接"></a>2 JavaAPI操作-建立连接</h3><p>1，搭建项目</p>
<p>创建项目curator-zk</p>
<p>引入pom和日志文件</p>
<p>pom.xml和log4j.properties</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_27_3_1592055569716.png" alt="1592055569716"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log4j.properties配置</span><br><br><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">off,stdout</span><br><span class="hljs-attr">log4j.appender.stdout</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.stdout.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.stdout.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="hljs-string">[%d&#123;yyyy-MM-dd HH/:mm/:ss&#125;]%-5p %c(line/:%L) %x-%m%n</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zk-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--curator--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--curator依赖,必须--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-recipes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>2、创建测试类，使用curator连接zookeeper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> CuratorFramework client;<br><span class="hljs-meta">@Before</span>  <span class="hljs-comment">//如果是单独测试连接是否成功，需要将@Before注解换成@Test注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-comment">//方式1：工厂静态方法创建对象</span><br>  <span class="hljs-comment">//创建重试策略</span><br>  RetryPolicy retryPolicy= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">3000</span>,<span class="hljs-number">10</span>);<br>  <span class="hljs-comment">//通过CuratorFrameworkFactory工程对象获取CuratorFramework核心对象</span><br>  <span class="hljs-comment">/**参数讲解：</span><br><span class="hljs-comment">  * String connectString：zookeeper连接地址和端口号，如果连接多个zookeeper使用逗号隔开</span><br><span class="hljs-comment">  * int sessionTimeoutMs：会话超时时间，执行CRUD操作都需要发送请求建立会话，如果在指定毫秒内没有建立会话那么就是超时</span><br><span class="hljs-comment">  * int connectionTimeoutMs：连接超时时间，指的是连接zookeeper服务器的超时时间</span><br><span class="hljs-comment">  * RetryPolicy retryPolicy：重试策略，当执行某些操作失败时会进行重试</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">/*  CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(&quot;127.0.0.1:2181&quot;,</span><br><span class="hljs-comment">                60 * 1000,</span><br><span class="hljs-comment">                15 * 1000,</span><br><span class="hljs-comment">                retryPolicy);</span><br><span class="hljs-comment">        //开始建立连接</span><br><span class="hljs-comment">        curatorFramework.start();*/</span><br><br>  <span class="hljs-comment">//方式2：链式编程</span><br>  client= CuratorFrameworkFactory.builder()<br>    .connectString(<span class="hljs-string">&quot;127.0.0.1:2181&quot;</span>)<br>    .sessionTimeoutMs(<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>)<br>    .connectionTimeoutMs(<span class="hljs-number">15</span> * <span class="hljs-number">1000</span>)<br>    .retryPolicy(retryPolicy)<br>    .namespace(<span class="hljs-string">&quot;itheima&quot;</span>)<br>    .build();<br><br>  <span class="hljs-comment">//开启连接</span><br>  client.start();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-JavaAPI操作-创建节点"><a href="#3-JavaAPI操作-创建节点" class="headerlink" title="3 JavaAPI操作-创建节点"></a>3 JavaAPI操作-创建节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 创建节点：create 持久 临时 顺序 数据</span><br><span class="hljs-comment">* 1. 基本创建 ：create().forPath(&quot;&quot;)</span><br><span class="hljs-comment">* 2. 创建节点 带有数据:create().forPath(&quot;&quot;,data)</span><br><span class="hljs-comment">* 3. 设置节点的类型：create().withMode().forPath(&quot;&quot;,data)</span><br><span class="hljs-comment">* 4. 创建多级节点  /app1/p1 ：create().creatingParentsIfNeeded().forPath(&quot;&quot;,data)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     <span class="hljs-comment">//1. 基本创建</span><br>    <span class="hljs-comment">//如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> client.create().forPath(<span class="hljs-string">&quot;/app1&quot;</span>);<br>    System.out.println(path);<br>    <br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreate2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//2. 创建节点 带有数据</span><br>    <span class="hljs-comment">//如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> client.create().forPath(<span class="hljs-string">&quot;/app2&quot;</span>, <span class="hljs-string">&quot;hehe&quot;</span>.getBytes());<br>    System.out.println(path);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreate3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//3. 设置节点的类型</span><br>    <span class="hljs-comment">//默认类型：持久化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="hljs-string">&quot;/app3&quot;</span>);<br>    System.out.println(path);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreate4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//4. 创建多级节点  /app1/p1</span><br>    <span class="hljs-comment">//creatingParentsIfNeeded():如果父节点不存在，则创建父节点</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> client.create().creatingParentsIfNeeded().forPath(<span class="hljs-string">&quot;/app4/p1&quot;</span>);<br>    System.out.println(path);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4-JavaAPI操作-查询节点"><a href="#4-JavaAPI操作-查询节点" class="headerlink" title="4 JavaAPI操作-查询节点"></a>4 JavaAPI操作-查询节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询节点：</span><br><span class="hljs-comment">* 1. 查询数据：get: getData().forPath()</span><br><span class="hljs-comment">* 2. 查询子节点： ls: getChildren().forPath()</span><br><span class="hljs-comment">* 3. 查询节点状态信息：ls -s:getData().storingStatIn(状态对象).forPath()</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1. 查询数据：get</span><br>    <span class="hljs-type">byte</span>[] data = client.getData().forPath(<span class="hljs-string">&quot;/app1&quot;</span>);<br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data));<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 2. 查询子节点： ls  </span><br>    List&lt;String&gt; path = client.getChildren().forPath(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//相当于：ls /</span><br>    System.out.println(path);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Stat</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stat</span>();<br>    System.out.println(status);<br>    <span class="hljs-comment">//3. 查询节点状态信息：ls -s</span><br>    client.getData().storingStatIn(status).forPath(<span class="hljs-string">&quot;/app1&quot;</span>);<br>    System.out.println(status);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="5-JavaAPI操作-修改节点"><a href="#5-JavaAPI操作-修改节点" class="headerlink" title="5 JavaAPI操作-修改节点"></a>5 JavaAPI操作-修改节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 修改数据</span><br><span class="hljs-comment">* 1. 基本修改数据：setData().forPath()</span><br><span class="hljs-comment">* 2. 根据版本修改: setData().withVersion().forPath()</span><br><span class="hljs-comment">  version 是通过查询出来的。目的就是为了让其他客户端或者线程不干扰我。</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>	client.setData().forPath(<span class="hljs-string">&quot;/app1&quot;</span>, <span class="hljs-string">&quot;itcast&quot;</span>.getBytes());<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSetForVersion</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Stat</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stat</span>();<br>    <span class="hljs-comment">//3. 查询节点状态信息：ls -s</span><br>    client.getData().storingStatIn(status).forPath(<span class="hljs-string">&quot;/app1&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> status.getVersion();<span class="hljs-comment">//查询出来的 3</span><br>    System.out.println(version);<br>    client.setData().withVersion(version).forPath(<span class="hljs-string">&quot;/app1&quot;</span>, <span class="hljs-string">&quot;hehe&quot;</span>.getBytes());<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="6-JavaAPI操作-删除节点"><a href="#6-JavaAPI操作-删除节点" class="headerlink" title="6 JavaAPI操作-删除节点"></a>6 JavaAPI操作-删除节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除节点： delete deleteall</span><br><span class="hljs-comment">* 1. 删除单个节点:delete().forPath(&quot;/app1&quot;);</span><br><span class="hljs-comment">* 2. 删除带有子节点的节点:delete().deletingChildrenIfNeeded().forPath(&quot;/app1&quot;);</span><br><span class="hljs-comment">* 3. 必须成功的删除:为了防止网络抖动。本质就是重试。  client.delete().guaranteed().forPath(&quot;/app2&quot;);</span><br><span class="hljs-comment">* 4. 回调：inBackground</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1. 删除单个节点</span><br>    client.delete().forPath(<span class="hljs-string">&quot;/app1&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//2. 删除带有子节点的节点</span><br>    client.delete().deletingChildrenIfNeeded().forPath(<span class="hljs-string">&quot;/app4&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//3. 必须成功的删除</span><br>    client.delete().guaranteed().forPath(<span class="hljs-string">&quot;/app2&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//4. 回调</span><br>    client.delete().guaranteed().inBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BackgroundCallback</span>()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processResult</span><span class="hljs-params">(CuratorFramework client, CuratorEvent event)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            System.out.println(<span class="hljs-string">&quot;我被删除了~&quot;</span>);<br>            System.out.println(event);<br>        &#125;<br>    &#125;).forPath(<span class="hljs-string">&quot;/app1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="7-JavaAPI操作-Watch监听概述"><a href="#7-JavaAPI操作-Watch监听概述" class="headerlink" title="7 JavaAPI操作-Watch监听概述"></a>7 JavaAPI操作-Watch监听概述</h3><p>问题：zookeeper提供了几种监听，监听的对象分别是什么？</p>
<ul>
<li><p>ZooKeeper 允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性。</p>
</li>
<li><p>ZooKeeper 中引入了Watcher机制来实现了发布&#x2F;订阅功能能，能够让多个订阅者同时监听某一个对象，当一个对象自身状态变化时，会通知所有订阅者。</p>
</li>
<li><p>ZooKeeper 原生支持通过注册Watcher来进行事件监听，但是其使用并不是特别方便需要开发人员自己反复注册Watcher，比较繁琐。Curator引入了 Cache 来实现对 ZooKeeper 服务端事件的监听。</p>
</li>
<li><p>ZooKeeper提供了三种Watcher：</p>
</li>
</ul>
<p>​		NodeCache : 只是监听某一个特定的节点</p>
<p>​		PathChildrenCache : 监控一个ZNode的子节点. </p>
<p>​		TreeCache : 可以监控整个树上的所有节点，类似于PathChildrenCache和NodeCache的组合</p>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_29_58_1592057429708.png" alt="1592057429708"></p>
<h4 id="7-1-JavaAPI操作-Watch监听-NodeCache"><a href="#7-1-JavaAPI操作-Watch监听-NodeCache" class="headerlink" title="7.1 JavaAPI操作-Watch监听-NodeCache"></a>7.1 JavaAPI操作-Watch监听-NodeCache</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 NodeCache：给指定一个节点注册监听器</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNodeCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1. 创建NodeCache对象</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">NodeCache</span> <span class="hljs-variable">nodeCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeCache</span>(client,<span class="hljs-string">&quot;/app1&quot;</span>);<br>    <span class="hljs-comment">//2. 注册监听</span><br>   	nodeCache.getListenable().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeCacheListener</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nodeChanged</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            System.out.println(<span class="hljs-string">&quot;节点变化了~&quot;</span>);<br>            <span class="hljs-comment">//获取修改节点后的数据</span><br>            <span class="hljs-type">byte</span>[] data = nodeCache.getCurrentData().getData();<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data));<br>            &#125;<br>    &#125;);<br>    <span class="hljs-comment">//3. 开启监听.如果设置为true，则开启监听是，加载缓冲数据</span><br>    nodeCache.start(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="7-2-JavaAPI操作-Watch监听-PathChildrenCache"><a href="#7-2-JavaAPI操作-Watch监听-PathChildrenCache" class="headerlink" title="7.2 JavaAPI操作-Watch监听-PathChildrenCache"></a>7.2 JavaAPI操作-Watch监听-PathChildrenCache</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPathChildrenCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1.创建监听对象</span><br>    <span class="hljs-type">PathChildrenCache</span> <span class="hljs-variable">pathChildrenCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathChildrenCache</span>(client,<span class="hljs-string">&quot;/app2&quot;</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//2. 绑定监听器</span><br>    pathChildrenCache.getListenable().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathChildrenCacheListener</span>() &#123;    			<span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">childEvent</span><span class="hljs-params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            System.out.println(<span class="hljs-string">&quot;子节点变化了~&quot;</span>);<br>            System.out.println(event);<br>            <span class="hljs-comment">//监听子节点的数据变更，并且拿到变更后的数据</span><br>            <span class="hljs-comment">//1.获取类型</span><br>            PathChildrenCacheEvent.<span class="hljs-type">Type</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> event.getType();<br>            <span class="hljs-comment">//2.判断类型是否是update</span><br>            <span class="hljs-keyword">if</span>(type.equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))&#123;<br>                System.out.println(<span class="hljs-string">&quot;数据变了！！！&quot;</span>);<br>                <span class="hljs-type">byte</span>[] data = event.getData().getData();<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data));<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//3. 开启</span><br>    pathChildrenCache.start();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="7-3-JavaAPI操作-Watch监听-TreeCache"><a href="#7-3-JavaAPI操作-Watch监听-TreeCache" class="headerlink" title="7.3 JavaAPI操作-Watch监听-TreeCache"></a>7.3 JavaAPI操作-Watch监听-TreeCache</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 TreeCache：监听某个节点自己和所有子节点们</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTreeCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1. 创建监听器</span><br>    <span class="hljs-type">TreeCache</span> <span class="hljs-variable">treeCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeCache</span>(client,<span class="hljs-string">&quot;/app2&quot;</span>);<br>    <span class="hljs-comment">//2. 注册监听</span><br>    treeCache.getListenable().addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeCacheListener</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">childEvent</span><span class="hljs-params">(CuratorFramework client, TreeCacheEvent event)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            System.out.println(<span class="hljs-string">&quot;节点变化了&quot;</span>);<br>            System.out.println(event);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//3. 开启</span><br>    treeCache.start();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="x3D-x3D-【第四章】Zookeeper分布式锁【重点】-x3D-x3D"><a href="#x3D-x3D-【第四章】Zookeeper分布式锁【重点】-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;【第四章】Zookeeper分布式锁【重点】&#x3D;&#x3D;"></a>&#x3D;&#x3D;【第四章】Zookeeper分布式锁【重点】&#x3D;&#x3D;</h2><h3 id="1-ZooKeeper分布式锁概念"><a href="#1-ZooKeeper分布式锁概念" class="headerlink" title="1 ZooKeeper分布式锁概念"></a>1 ZooKeeper分布式锁概念</h3><p>问题1：之前的synchronized同步在分布式项目中为什么不能用？</p>
<p>问题2：分布式锁的实现有哪些？</p>
<ul>
<li><p>在我们进行单机应用开发，涉及并发同步的时候，我们往往采用synchronized或者Lock的方式来解决多线程间的代码同步问题，这时多线程的运行都是在同一个JVM之下，没有任何问题。</p>
</li>
<li><p>但当我们的应用是分布式集群工作的情况下，属于多JVM下的工作环境，跨JVM之间已经无法通过多线程的锁解决同步问题。</p>
</li>
<li><p>那么就需要一种更加高级的锁机制，来处理<strong>跨机器的进程之间的数据同步</strong>问题——这就是分布式锁。</p>
</li>
</ul>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_5_1592057871141.png" alt="1592057871141"></p>
<h3 id="x3D-x3D-2-zookeeper分布式锁原理【重点】-x3D-x3D"><a href="#x3D-x3D-2-zookeeper分布式锁原理【重点】-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;2 zookeeper分布式锁原理【重点】&#x3D;&#x3D;"></a>&#x3D;&#x3D;2 zookeeper分布式锁原理【重点】&#x3D;&#x3D;</h3><p><strong>&#x3D;&#x3D;核心思想：当客户端想要获取锁，则先创建临时顺序节点，使用完锁，则删除该节点。&#x3D;&#x3D;</strong></p>
<ol>
<li>客户端想获取锁时，在lock节点下创建<strong>临时顺序</strong>节点。</li>
<li>然后获取lock下面的所有子节点，客户端获取到所有的子节点之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。使用完锁后，将该节点删除。</li>
<li>如果发现自己创建的节点并非lock所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，同时对其注册事件监听器，监听删除事件。</li>
<li>如果被监听的那个节点被删除，则客户端的Watcher会收到相应通知，此时再次判断自己创建的节点是否是lock子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点 并注册监听。</li>
</ol>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_9_1592057925831.png" alt="1592057925831"></p>
<h3 id="x3D-x3D-3-分布式锁-模拟12306售票案例【重要】-x3D-x3D"><a href="#x3D-x3D-3-分布式锁-模拟12306售票案例【重要】-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;3 分布式锁-模拟12306售票案例【重要】&#x3D;&#x3D;"></a>&#x3D;&#x3D;3 分布式锁-模拟12306售票案例【重要】&#x3D;&#x3D;</h3><p><strong>Curator实现分布式锁API</strong></p>
<ul>
<li><p>在Curator中有五种锁方案：</p>
<ul>
<li><p>InterProcessSemaphoreMutex：分布式排它锁（非可重入锁）</p>
</li>
<li><p>InterProcessMutex：分布式可重入排它锁</p>
</li>
<li><p>InterProcessReadWriteLock：分布式读写锁</p>
</li>
<li><p>InterProcessMultiLock：将多个锁作为单个实体管理的容器</p>
</li>
<li><p>InterProcessSemaphoreV2：共享信号量</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_14_1592058017457.png" alt="1592058017457"></p>
<h4 id="3-1-创建连接，并且初始化锁"><a href="#3-1-创建连接，并且初始化锁" class="headerlink" title="3.1 创建连接，并且初始化锁"></a>3.1 创建连接，并且初始化锁</h4><blockquote>
<p>创建public class Ticket12306 implements Runnable重写空参构造，初始化所对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket12306</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ticket12306</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//重试策略</span><br>        <span class="hljs-type">RetryPolicy</span> <span class="hljs-variable">retryPolicy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExponentialBackoffRetry</span>(<span class="hljs-number">3000</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//2.第二种方式</span><br>        <span class="hljs-comment">//CuratorFrameworkFactory.builder();</span><br>        <span class="hljs-type">CuratorFramework</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> CuratorFrameworkFactory.builder()<br>            .connectString(<span class="hljs-string">&quot;192.168.149.135:2181&quot;</span>)<br>            .sessionTimeoutMs(<span class="hljs-number">60</span> * <span class="hljs-number">1000</span>)<br>            .connectionTimeoutMs(<span class="hljs-number">15</span> * <span class="hljs-number">1000</span>)<br>            .retryPolicy(retryPolicy)<br>            .build();<br>        <span class="hljs-comment">//开启连接</span><br>        client.start();<br>        <span class="hljs-comment">//创建锁对象</span><br>        lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterProcessMutex</span>(client,<span class="hljs-string">&quot;/lock&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="3-2-创建线程进行加锁设置"><a href="#3-2-创建线程进行加锁设置" class="headerlink" title="3.2 创建线程进行加锁设置"></a>3.2 创建线程进行加锁设置</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket12306</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//数据库的票数</span><br>  <span class="hljs-keyword">private</span> InterProcessMutex lock ;<br>    <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ticket12306</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//创建重试策略、创建连接、开启连接和创建分布式锁对象上面有，此处省略省略...</span><br>  &#125;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//循环卖票</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>      <span class="hljs-comment">//判断如果票数大于1才卖票</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取锁对象</span><br>       lock.acquire(); <span class="hljs-comment">//阻塞的方法，如果没有获取到锁对象会一直等待</span><br>        <span class="hljs-comment">//开始卖票</span><br>        <span class="hljs-keyword">if</span>(ticket&gt;<span class="hljs-number">0</span>)&#123;<br>       System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在买第&quot;</span>+ticket+<span class="hljs-string">&quot;张票&quot;</span>);<br>          <span class="hljs-comment">//票要减少一张</span><br>          ticket--;<br>          <span class="hljs-comment">//模拟卖票时间</span><br>          Thread.sleep(<span class="hljs-number">50</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-comment">//票卖完了就需要结束线程</span><br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>      &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//释放锁对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>          lock.release();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          e.printStackTrace();<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="3-3-运行多个线程进行测试"><a href="#3-3-运行多个线程进行测试" class="headerlink" title="3.3 运行多个线程进行测试"></a>3.3 运行多个线程进行测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Ticket12306</span> <span class="hljs-variable">ticket12306</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket12306</span>();<br>        <span class="hljs-comment">//创建客户端</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket12306,<span class="hljs-string">&quot;携程&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket12306,<span class="hljs-string">&quot;飞猪&quot;</span>);<br>      <br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="【第五章】ZooKeeper集群搭建"><a href="#【第五章】ZooKeeper集群搭建" class="headerlink" title="【第五章】ZooKeeper集群搭建"></a>【第五章】ZooKeeper集群搭建</h2><h3 id="1-ZooKeeper集群-介绍"><a href="#1-ZooKeeper集群-介绍" class="headerlink" title="1 ZooKeeper集群-介绍"></a>1 ZooKeeper集群-介绍</h3><p>Leader选举：</p>
<ul>
<li><p>Serverid：服务器ID</p>
<p>比如有三台服务器，编号分别是1,2,3。</p>
<p>编号越大在选择算法中的权重越大。</p>
</li>
<li><p>Zxid：数据ID</p>
<p>服务器中存放的最大数据ID.值越大说明数据越新，在选举算法中数据越新权重越大。</p>
</li>
<li><p>在Leader选举的过程中，如果某台ZooKeeper</p>
</li>
</ul>
<p>​    获得了超过半数的选票，</p>
<p>​    则此ZooKeeper就可以成为Leader了。</p>
<h3 id="2-1-ZooKeeper集群-搭建"><a href="#2-1-ZooKeeper集群-搭建" class="headerlink" title="2 1 ZooKeeper集群-搭建"></a>2 1 ZooKeeper集群-搭建</h3><h4 id="2-1-搭建要求"><a href="#2-1-搭建要求" class="headerlink" title="2.1 搭建要求"></a>2.1 搭建要求</h4><p>真实的集群是需要部署在不同的服务器上的，但是在我们测试时同时启动很多个虚拟机内存会吃不消，所以我们通常会搭建<strong>伪集群</strong>，也就是把所有的服务都搭建在一台虚拟机上，用端口进行区分。</p>
<p>我们这里要求搭建一个三个节点的Zookeeper集群（伪集群）。</p>
<h4 id="2-2-准备工作"><a href="#2-2-准备工作" class="headerlink" title="2.2 准备工作"></a>2.2 准备工作</h4><p>重新部署一台虚拟机作为我们搭建集群的测试服务器。</p>
<p>（1）安装JDK  【此步骤省略】。</p>
<p>（2）Zookeeper压缩包上传到服务器<br>（3）将Zookeeper解压 ，建立&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster目录，将解压后的Zookeeper复制到以下三个目录</p>
<p>&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-1</p>
<p>&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-2</p>
<p>&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir /usr/local/zookeeper-cluster<br>[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-1<br>[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-2<br>[root@localhost ~]# cp -r  apache-zookeeper-3.5.6-bin /usr/local/zookeeper-cluster/zookeeper-3<br></code></pre></td></tr></table></figure>

<p>（4）创建data目录 ，并且将 conf下zoo_sample.cfg 文件改名为 zoo.cfg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir /usr/local/zookeeper-cluster/zookeeper-1/data<br>mkdir /usr/local/zookeeper-cluster/zookeeper-2/data<br>mkdir /usr/local/zookeeper-cluster/zookeeper-3/data<br><br>mv  /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg<br>mv  /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg<br>mv  /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo_sample.cfg  /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg<br></code></pre></td></tr></table></figure>

<p>（5） 配置每一个Zookeeper 的dataDir 和 clientPort 分别为2181  2182  2183</p>
<p>修改&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-1&#x2F;conf&#x2F;zoo.cfg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg<br><br>clientPort=2181<br>dataDir=/usr/local/zookeeper-cluster/zookeeper-1/data<br></code></pre></td></tr></table></figure>

<p>修改&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-2&#x2F;conf&#x2F;zoo.cfg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg<br><br>clientPort=2182<br>dataDir=/usr/local/zookeeper-cluster/zookeeper-2/data<br></code></pre></td></tr></table></figure>

<p>修改&#x2F;usr&#x2F;local&#x2F;zookeeper-cluster&#x2F;zookeeper-3&#x2F;conf&#x2F;zoo.cfg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg<br><br>clientPort=2183<br>dataDir=/usr/local/zookeeper-cluster/zookeeper-3/data<br></code></pre></td></tr></table></figure>

<h4 id="2-3-配置集群"><a href="#2-3-配置集群" class="headerlink" title="2.3 配置集群"></a>2.3 配置集群</h4><p>（1）在每个zookeeper的 data 目录下创建一个 myid 文件，内容分别是1、2、3 。这个文件就是记录每个服务器的ID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">echo 1 &gt;/usr/local/zookeeper-cluster/zookeeper-1/data/myid<br>echo 2 &gt;/usr/local/zookeeper-cluster/zookeeper-2/data/myid<br>echo 3 &gt;/usr/local/zookeeper-cluster/zookeeper-3/data/myid<br></code></pre></td></tr></table></figure>

<p>（2）在每一个zookeeper 的 zoo.cfg配置客户端访问端口（clientPort）和集群服务器IP列表。</p>
<p>集群服务器IP列表如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /usr/local/zookeeper-cluster/zookeeper-1/conf/zoo.cfg<br>vim /usr/local/zookeeper-cluster/zookeeper-2/conf/zoo.cfg<br>vim /usr/local/zookeeper-cluster/zookeeper-3/conf/zoo.cfg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">说明：以下内容每个zookeeper的配置文件都需要放一份</span><br>server.1=192.168.149.135:2881:3881<br>server.2=192.168.149.135:2882:3882<br>server.3=192.168.149.135:2883:3883<br></code></pre></td></tr></table></figure>

<p>解释：server.服务器ID&#x3D;服务器IP地址：服务器之间通信端口：服务器之间投票选举端口</p>
<h4 id="2-4-启动集群"><a href="#2-4-启动集群" class="headerlink" title="2.4 启动集群"></a>2.4 启动集群</h4><p>启动集群就是分别启动每个实例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start<br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start<br>/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start<br></code></pre></td></tr></table></figure>

<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_24_wps11.jpg" alt="img" style="zoom:200%;" /> 

<p>启动后我们查询一下每个实例的运行状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status<br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status<br>/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status<br></code></pre></td></tr></table></figure>

<p>先查询第一个服务</p>
<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_29_wps12.jpg" alt="img" style="zoom:200%;" /> 

<p>Mode为follower表示是<strong>跟随者</strong>（从）</p>
<p>再查询第二个服务Mod 为leader表示是<strong>领导者</strong>（主）</p>
<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_35_wps13.jpg" alt="img" style="zoom:200%;" /> 

<p>查询第三个为跟随者（从）</p>
<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_41_wps14.jpg" alt="img" style="zoom:200%;" /> 

<h3 id="3-1-ZooKeeper集群-故障测试"><a href="#3-1-ZooKeeper集群-故障测试" class="headerlink" title="3 1 ZooKeeper集群-故障测试"></a>3 1 ZooKeeper集群-故障测试</h3><p>（1）首先我们先测试如果是从服务器挂掉，会怎么样</p>
<p>把3号服务器停掉，观察1号和2号，发现状态并没有变化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh stop<br><br>/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status<br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status<br></code></pre></td></tr></table></figure>

<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_44_wps15.jpg" alt="img" style="zoom:200%;" />

<p>由此得出结论，3个节点的集群，从服务器挂掉，集群正常</p>
<p>（2）我们再把1号服务器（从服务器）也停掉，查看2号（主服务器）的状态，发现已经停止运行了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh stop<br><br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status<br></code></pre></td></tr></table></figure>

<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_48_wps16.jpg" alt="img" style="zoom:150%;" /> 

<p>由此得出结论，3个节点的集群，2个从服务器都挂掉，主服务器也无法运行。因为可运行的机器没有超过集群总数量的半数。</p>
<p>（3）我们再次把1号服务器启动起来，发现2号服务器又开始正常工作了。而且依然是领导者。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh start<br><br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status<br></code></pre></td></tr></table></figure>

<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_52_wps17.jpg" alt="img" style="zoom:150%;" /> 

<p>（4）我们把3号服务器也启动起来，把2号服务器停掉,停掉后观察1号和3号的状态。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh start<br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh stop<br><br>/usr/local/zookeeper-cluster/zookeeper-1/bin/zkServer.sh status<br>/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status<br></code></pre></td></tr></table></figure>

<img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_30_58_wps18.jpg" alt="img" style="zoom:150%;" /> 

<p>发现新的leader产生了~  </p>
<p>由此我们得出结论，当集群中的主服务器挂了，集群中的其他服务器会自动进行选举状态，然后产生新得leader </p>
<p>（5）我们再次测试，当我们把2号服务器重新启动起来启动后，会发生什么？2号服务器会再次成为新的领导吗？我们看结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh start<br><br>/usr/local/zookeeper-cluster/zookeeper-2/bin/zkServer.sh status<br>/usr/local/zookeeper-cluster/zookeeper-3/bin/zkServer.sh status<br></code></pre></td></tr></table></figure>

<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_31_2_wps19.jpg" alt="img" style="zoom:150%;" /><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_31_8_wps20.jpg" alt="img" style="zoom:150%;" /> </p>
<p>我们会发现，2号服务器启动后依然是跟随者（从服务器），3号服务器依然是领导者（主服务器），没有撼动3号服务器的领导地位。</p>
<p>由此我们得出结论，当领导者产生后，再次有新服务器加入集群，不会影响到现任领导者。</p>
<h3 id="4-Zookeepe集群-角色"><a href="#4-Zookeepe集群-角色" class="headerlink" title="4 Zookeepe集群-角色"></a>4 Zookeepe集群-角色</h3><p>在ZooKeeper集群服中务中有三个角色：</p>
<p>•Leader 领导者 ：          </p>
<p>​	1. 处理事务请求</p>
<p>​	2. 集群内部各服务器的调度者</p>
<p>•Follower 跟随者 ：</p>
<p>​	1. 处理客户端非事务请求，转发事务请求给Leader服务器</p>
<p>​	2. 参与Leader选举投票</p>
<p>•Observer 观察者：</p>
<pre><code class="hljs">1. 处理客户端非事务请求，转发事务请求给Leader服务器
</code></pre>
<p><img src="https://jihulab.com/zrhahaha/mypig/-/raw/main/pictures/2023/04/30_8_34_16_1572505556589.png" alt="1572505556589"></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
